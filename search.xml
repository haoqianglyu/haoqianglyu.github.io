<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于python处理数据和使用matplotlib画图的一些总结</title>
      <link href="2021/05/10/%E5%85%B3%E4%BA%8Epython%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E5%92%8C%E4%BD%BF%E7%94%A8matplotlib%E7%94%BB%E5%9B%BE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
      <url>2021/05/10/%E5%85%B3%E4%BA%8Epython%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E5%92%8C%E4%BD%BF%E7%94%A8matplotlib%E7%94%BB%E5%9B%BE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>最近公司跟同济合作弄了一个气象数据分析模型，后续需要我做一些对excel数据的处理、绘制一些特定的图表(例如饼状图，雷达图，箱型图，以及最复杂的是一个颜色块阵图)。下面是我对一些用到的工具的总结，譬如画图的库<a href="https://www.osgeo.cn/matplotlib/gallery/index.html">matplotlib</a>，Excel与Python串联的工具pandas，以及Python中强大的数学库Numpy。</p><a id="more"></a><h3 id="使用Pandas从excel导入导出、处理数据"><a href="#使用Pandas从excel导入导出、处理数据" class="headerlink" title="使用Pandas从excel导入导出、处理数据"></a>使用Pandas从excel导入导出、处理数据</h3><p>Pandas是一个强大的分析结构化数据的工具集；它的使用基础是Numpy（提供高性能的矩阵运算）；用于数据挖掘和数据分析，同时也提供数据清洗功能。他有两个比较实用的小工具：DataFrame和Series。他们的内容其实很多，我只总结我用到的，有兴趣的可以自己去翻文档。</p><h4 id="利器之一：DataFrame"><a href="#利器之一：DataFrame" class="headerlink" title="利器之一：DataFrame"></a>利器之一：DataFrame</h4><p>DataFrame是Pandas中的一个表格型的数据结构，包含有一组有序的列，每列可以是不同的值类型(数值、字符串、布尔型等)，DataFrame即有行索引也有列索引，可以被看做是由Series组成的字典。</p><h5 id="从excel导入数据"><a href="#从excel导入数据" class="headerlink" title="从excel导入数据"></a>从excel导入数据</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">filepath = <span class="string">&#x27;北京.xlsx&#x27;</span></span><br><span class="line">df = pd.read_excel(filepath, sheet_name=<span class="string">&quot;逐时气象参数&quot;</span>, skiprows=1)</span><br></pre></td></tr></table></figure><p>上述代码会将”北京.xlsx”这个文件里的内容全部读入DataFrame以便后续的处理，我使用skiprows=1是因为从气象网站上拉下来的源数据第一行是空行，所以我把它去除掉了。pd.read_excel()这个方法的参数可以有20多个，有兴趣的自行查看。值得注意的是这时候的dataframe与初始excel表几乎一样，有一个区别是dataframe会在第一列添加从0依次递增的索引,类似于下图：</p><center><img src="/images/dataframe.png"/></center><h5 id="创建新的dataframe"><a href="#创建新的dataframe" class="headerlink" title="创建新的dataframe"></a>创建新的dataframe</h5><p>很多时候我们处理完excel数据时候会出现新的列，或者新的分析结果需要插入到excel中，这时候就需要在python中使用DataFrame来保存你处理完的数据,例如我用了字典来存储城市的数据，字典内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;上海&#x27;</span>: [1.61, 10.65, 6.5, 6.28, 5.09, 7.41], </span><br><span class="line"> <span class="string">&#x27;乐山&#x27;</span>: [0.0, 9.08, 4.95, 4.74, 3.44, 6.24], </span><br><span class="line"> <span class="string">&#x27;东方&#x27;</span>: [2.79, 9.77, 6.5, 6.35, 5.44, 7.22], </span><br><span class="line"> <span class="string">&#x27;盐城&#x27;</span>: [2.42, 10.89, 7.18, 6.92, 5.7, 7.9], </span><br><span class="line"> <span class="string">&#x27;丽江&#x27;</span>: [0, 0, 0.0, 0.0, 0.0, 0.0]&#125;</span><br></pre></td></tr></table></figure><p>想要把它存入excel，并新建一个名为”除湿供冷”的表单，只需要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(box_dict)</span><br><span class="line">write = pd.ExcelWriter(<span class="string">&#x27;城市数据.xlsx&#x27;</span>)</span><br><span class="line">df.to_excel(write, sheet_name=<span class="string">&#x27;除湿供冷&#x27;</span>, index=False)</span><br><span class="line">write.save()</span><br></pre></td></tr></table></figure><p>注：如果你想放入excel的不是数据而是图片，使用以下方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import xlwings as xw</span><br><span class="line">import pandas as pd</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">wb = xw.Book(<span class="string">&#x27;citymap.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment"># 在wb中新建一张新的sheet.可以指定位置</span></span><br><span class="line">sheet = wb.sheets.add(name=cityname, before=None, after=None)</span><br><span class="line">im = Image.open(filepath)</span><br><span class="line">width, height = im.size[0], im.size[1]</span><br><span class="line">sheet.pictures.add(filepath, left=sheet.range(<span class="string">&#x27;D5&#x27;</span>).left, top=sheet.range(<span class="string">&#x27;D5&#x27;</span>).top,width=width,height=height)</span><br><span class="line">wb.save()</span><br><span class="line">wb.close()</span><br></pre></td></tr></table></figure><h4 id="利器之二：Series"><a href="#利器之二：Series" class="headerlink" title="利器之二：Series"></a>利器之二：Series</h4><p>它是一种类似于一维数组的对象，是由一组数据(各种NumPy数据类型)以及一组与之相关的数据标签(即索引)组成。仅由一组数据也可产生简单的Series对象。以前我使用过这个，但这次用的不多就不做过多介绍了，想了解的自行查阅文档。</p><h3 id="关于图表上显示不出中文的问题"><a href="#关于图表上显示不出中文的问题" class="headerlink" title="关于图表上显示不出中文的问题"></a>关于图表上显示不出中文的问题</h3><p>运行报错内容大致如下：</p><center><img src="/images/error.png"/></center>绘制出来的图像是这样的：<center><img src="/images/pie_error.png" width="500" height="250" /></center>这个问题的原因是你的matplotlib(以下简称plt)找不到字体，需要自行设置一下，网上大部分解决方法是:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>]</span><br></pre></td></tr></table></figure><p>但是我自己的macbook pro并不带SimHei这个字体，而且我也不想去下载字体之后添加进去,折腾好久发现python还是自带可以显示中文的字体的，输入如下代码可以查看系统可用字体</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from matplotlib.font_manager import FontManager</span><br><span class="line">fm = FontManager()</span><br><span class="line">mat_fonts = <span class="built_in">set</span>(f.name <span class="keyword">for</span> f <span class="keyword">in</span> fm.ttflist)</span><br><span class="line"><span class="built_in">print</span>(mat_fonts)</span><br></pre></td></tr></table></figure><p>上面的代码大家有兴趣可以自己去尝试着玩一下，下面才是重点,我是用的是下面这个字体就能正常显示中文了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;Arial Unicode MS&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = False  <span class="comment"># 用来正常显示负号</span></span><br></pre></td></tr></table></figure><p>正确显示的饼状图如下：</p><center><img src="/images/pie_right.png" width="500" height="250" /></center><h3 id="绘制颜色块阵图"><a href="#绘制颜色块阵图" class="headerlink" title="绘制颜色块阵图"></a>绘制颜色块阵图</h3><p>其实很多plt可以画出来的图，excel里也可以画出来，只不过在对于源数据的处理上可能使用excel本身的话，没有像python这么方便，这里的这个块阵图excel也可以做得到，只是数据不好处理而且不太美观。首先说一下我大概要画什么，需求是这样的，举个简单例子：假设有一个5*3共15个格子的方格，每个方格里有1-9的数字，我们要根据数字的不同，给他填充上对应的颜色，比如1对应蓝色，2对应红色。如果你进入到<a href="https://www.osgeo.cn/matplotlib/gallery/index.html">Matplotlib官网</a>，它里面有类似的，比如”彩色网格”：</p><center><img src="/images/colorgrid.png" width="300" height="200"/></center>只不过类似这种的，官网上的方案只有依靠pcolormesh 或者 cmap(一般就是一个色阶)来完成，无法自定义数字对应颜色的要求，下面介绍我发现的两种方法，数据处理这里不赘述了，一些巧妙地方法后面介绍，默认这里的输入数据就是一个python矩阵(我的数据是365天*24小时=8760小时的矩阵)。<h4 id="方法1：使用Image直接生成"><a href="#方法1：使用Image直接生成" class="headerlink" title="方法1：使用Image直接生成"></a>方法1：使用Image直接生成</h4><p>首先将每个格子的数字，拆分成[r,g,b]三原色数组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填充地图数组的颜色通道</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(365):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(24):</span><br><span class="line">        value = int(map_data[i][j])</span><br><span class="line">        <span class="keyword">if</span> value == 0:  <span class="comment"># 如果地图值为0，显示黑色</span></span><br><span class="line">            map_data[i][j] = [0, 0, 0]</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 将流量低的区域根据区域号码来填充RGB三通道</span></span><br><span class="line">            r = (value % 255) * 50 % 255  <span class="comment"># 取模乘以50再取模作为R通道</span></span><br><span class="line">            g = (value // 255) * 50 + 100  <span class="comment"># 取整加100作为G通道的值</span></span><br><span class="line">            b = value % 255  <span class="comment"># 取模作为B通道的值</span></span><br><span class="line">            <span class="keyword">if</span> value == 1:</span><br><span class="line">                map_data[i][j] = [117,21,21]  <span class="comment"># 棕色</span></span><br><span class="line">            <span class="keyword">elif</span> value == 2:</span><br><span class="line">                map_data[i][j] = [255, 109, 109]  <span class="comment"># 红色</span></span><br><span class="line">            <span class="keyword">elif</span> value == 3:</span><br><span class="line">                map_data[i][j] = [231, 103, 174]  <span class="comment"># 紫色</span></span><br><span class="line">            <span class="keyword">elif</span> value == 4:</span><br><span class="line">                map_data[i][j] = [156, 156, 156]  <span class="comment"># 灰色</span></span><br><span class="line">            <span class="keyword">elif</span> value == 5:</span><br><span class="line">                map_data[i][j] = [255, 192, 203]  <span class="comment"># 粉色</span></span><br><span class="line">            <span class="keyword">elif</span> value == 6:</span><br><span class="line">                map_data[i][j] = [255, 251, 153]  <span class="comment"># 黄色</span></span><br><span class="line">            <span class="keyword">elif</span> value == 7:</span><br><span class="line">                map_data[i][j] = [93,201,149]  <span class="comment"># 青色</span></span><br><span class="line">            <span class="keyword">elif</span> value == 8:</span><br><span class="line">                map_data[i][j] = [8,33,170]  <span class="comment"># 蓝色</span></span><br><span class="line">            <span class="keyword">elif</span> value == 9:</span><br><span class="line">                map_data[i][j] = [60, 123, 36]  <span class="comment"># 绿色</span></span><br></pre></td></tr></table></figure><p>然后利用Image将转换过后的颜色矩阵，绘制出来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出png图像</span></span><br><span class="line">map_data = np.array(map_data)</span><br><span class="line">map_data = np.asarray(map_data, np.uint8)</span><br><span class="line">pic = Image.fromarray(map_data)</span><br><span class="line"><span class="comment"># 将图片逆时针旋转90度</span></span><br><span class="line">pic = pic.transpose(Image.ROTATE_90)</span><br><span class="line">pic.save(<span class="string">&#x27;city.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>效果图如下：</p><center><img src="/images/city.png"/></center><h4 id="方法2：使用matplotlib来完成"><a href="#方法2：使用matplotlib来完成" class="headerlink" title="方法2：使用matplotlib来完成"></a>方法2：使用matplotlib来完成</h4><p>首先，定义一个颜色对应的矩阵：[数值,r,g,b]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ca = np.array([[1,117,21,21],</span><br><span class="line">               [2,255, 109, 109],</span><br><span class="line">               [3,231, 103, 174],</span><br><span class="line">               [4,156, 156, 156],</span><br><span class="line">               [5,255, 192, 203],</span><br><span class="line">               [6,255, 251, 153],</span><br><span class="line">               [7,93,201,149],</span><br><span class="line">               [8,8,33,170],</span><br><span class="line">               [9,60, 123, 36]])</span><br></pre></td></tr></table></figure><p>然后将输入的矩阵，每个色块的数值变为[r/255,g/255,b/255]，这样的格式才能给plt制图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">u, ind = np.unique(a, return_inverse=True)</span><br><span class="line">ind = a - 1</span><br><span class="line">c = ca[ca[:,0].argsort()][:,1:]/255.</span><br><span class="line">b =  np.moveaxis(c[ind][:,:,np.newaxis],1,2).reshape((a.shape[0],a.shape[1],3))</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">plt.imshow(b)</span><br><span class="line">plt.savefig(<span class="string">&#x27;pic_name&#x27;</span>,dpi = 600)</span><br></pre></td></tr></table></figure><p>上述代码的第一行中的ind，在矩阵规模小的时候我测试了没问题，但是可能是我的数据过大还是什么原因，处理的不正确，所以我下面手动纠正了一步ind=a-1,经过上述代码我就讲我需要的矩阵填充上了我想要的颜色。</p><center><img src="/images/shanghai.png" width="600" height="250"/></center>上面两个图本质上是一模一样的，只是下面的图我用了一些小技巧让他更加好看：<h5 id="纵向拉伸："><a href="#纵向拉伸：" class="headerlink" title="纵向拉伸："></a>纵向拉伸：</h5><p>因为365*24这样的数据画出来的图，按照每一个网格都是正方形计算，纵向会特别窄，所以我把源数据矩阵每一行复制了四次，用以模拟纵向拉伸，这样做的还有一点好处(相较于图片直接拉伸)是图像不会失真。复制四次代码使用numpy也是轻松解决(感叹一句numpy真nb！)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.repeat(res,repeats = 4,axis=0)</span><br></pre></td></tr></table></figure><p>res就是原来的矩阵，a就是按行复制4次之后的numpy矩阵</p><h5 id="将365天的横坐标改成1-12月"><a href="#将365天的横坐标改成1-12月" class="headerlink" title="将365天的横坐标改成1-12月"></a>将365天的横坐标改成1-12月</h5><p>需要做的是把每个月月中的那一天算出来是365天中的第几天，依次对应即可,纵坐标以此类推，因为放大了4倍，所以对应着除以4就可以，这里不赘述了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">month_starts = [14,45,73,104,134,165,195,226,257,287,318,348]</span><br><span class="line">month_names = [<span class="string">&#x27;1月&#x27;</span>,<span class="string">&#x27;2月&#x27;</span>,<span class="string">&#x27;3月&#x27;</span>,<span class="string">&#x27;4月&#x27;</span>,<span class="string">&#x27;5月&#x27;</span>,<span class="string">&#x27;6月&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;7月&#x27;</span>,<span class="string">&#x27;8月&#x27;</span>,<span class="string">&#x27;9月&#x27;</span>,<span class="string">&#x27;10月&#x27;</span>,<span class="string">&#x27;11月&#x27;</span>,<span class="string">&#x27;12月&#x27;</span>]</span><br><span class="line"></span><br><span class="line">ax.set_xticks(month_starts)</span><br><span class="line">ax.set_xticklabels(month_names)</span><br></pre></td></tr></table></figure><h5 id="加上垂直于横坐标的参考线"><a href="#加上垂直于横坐标的参考线" class="headerlink" title="加上垂直于横坐标的参考线"></a>加上垂直于横坐标的参考线</h5><p>如果不加这个参考线，我们看整个图的时候再对应上会有些吃力。这里我偷了个懒，参考线直接按照365天除以12个月平分了，而不是每个月精细地去标：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">miloc = plt.MultipleLocator(365/12)</span><br><span class="line">ax.xaxis.set_minor_locator(miloc)</span><br><span class="line">plt.grid(<span class="built_in">which</span>=<span class="string">&#x27;minor&#x27;</span>,axis=<span class="string">&#x27;x&#x27;</span>,linestyle=<span class="string">&#x27;dashed&#x27;</span>, color=<span class="string">&#x27;grey&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="一些其他小技巧"><a href="#一些其他小技巧" class="headerlink" title="一些其他小技巧"></a>一些其他小技巧</h3><p>上述基本就是这次的总结内容了，还有一些使用中碰到的小问题，可以用一些小技巧去解决。</p><h4 id="饼状图加上图例以及控制图例的位置"><a href="#饼状图加上图例以及控制图例的位置" class="headerlink" title="饼状图加上图例以及控制图例的位置"></a>饼状图加上图例以及控制图例的位置</h4><p>使用ax.legend()即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ax.legend(wedges, new_labels,</span><br><span class="line">          title=<span class="string">&quot;模式&quot;</span>,</span><br><span class="line">          loc=<span class="string">&quot;center left&quot;</span>,</span><br><span class="line">          bbox_to_anchor=(1.3, 0, 0.5, 1))</span><br><span class="line"></span><br><span class="line">fig.subplots_adjust(right=0.7)</span><br></pre></td></tr></table></figure><h4 id="饼状图默认显示的是比例，如何显示数值，以及如何不显示数值为0的数据？"><a href="#饼状图默认显示的是比例，如何显示数值，以及如何不显示数值为0的数据？" class="headerlink" title="饼状图默认显示的是比例，如何显示数值，以及如何不显示数值为0的数据？"></a>饼状图默认显示的是比例，如何显示数值，以及如何不显示数值为0的数据？</h4><p>正常的饼状图按照我的数据如下图，应该有9个颜色，但是因为我这里两个模式的数据为0，所以将其去除了：</p><center><img src="/images/pie_right.png" width="500" height="250" /></center>做法如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">labels = [<span class="string">&#x27;供热+加湿&#x27;</span>, <span class="string">&#x27;供热&#x27;</span>, <span class="string">&#x27;供热+除湿&#x27;</span>, <span class="string">&#x27;加湿&#x27;</span>, <span class="string">&#x27;通风&#x27;</span>, <span class="string">&#x27;除湿&#x27;</span>, <span class="string">&#x27;供冷+加湿&#x27;</span>, <span class="string">&#x27;供冷&#x27;</span>, <span class="string">&#x27;供冷+除湿&#x27;</span>]</span><br><span class="line">sizes = [time1, time2, time3, time4, time5, time6, time7, time8, time9]</span><br><span class="line">sizes2 = np.array(sizes)</span><br><span class="line">index = np.where(sizes2==0)[0]</span><br><span class="line">index = index.tolist()</span><br><span class="line">new_labels = [labels[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(0, len(labels), 1) <span class="keyword">if</span> i not <span class="keyword">in</span> index] <span class="comment"># 删除后的列表</span></span><br><span class="line">new_time = [sizes[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(0, len(sizes), 1) <span class="keyword">if</span> i not <span class="keyword">in</span> index] <span class="comment"># 删除后的列表</span></span><br><span class="line">colors = [<span class="string">&#x27;#751515&#x27;</span>, <span class="string">&#x27;#ff6d6d&#x27;</span>, <span class="string">&#x27;#e767ae&#x27;</span>, <span class="string">&#x27;#9c9c9c&#x27;</span>, <span class="string">&#x27;#ffc0cb&#x27;</span>, <span class="string">&#x27;#fffb99&#x27;</span>, <span class="string">&#x27;#5dc995&#x27;</span>, <span class="string">&#x27;#0821aa&#x27;</span>, <span class="string">&#x27;#3c7b24&#x27;</span>]</span><br><span class="line">new_colors = [colors[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(0, len(colors), 1) <span class="keyword">if</span> i not <span class="keyword">in</span> index]</span><br><span class="line">def func(pct, allvals):</span><br><span class="line">    absolute = int(pct/100.*np.sum(allvals))</span><br><span class="line">    <span class="built_in">return</span> <span class="string">&quot;&#123;:d&#125;&quot;</span>.format(absolute)</span><br><span class="line"></span><br><span class="line">wedges, texts, c = ax.pie(new_time, autopct=lambda pct: func(pct, new_time),colors=new_colors,radius=1.2,labels=new_labels)</span><br></pre></td></tr></table></figure><h4 id="关于雷达图的画法："><a href="#关于雷达图的画法：" class="headerlink" title="关于雷达图的画法："></a>关于雷达图的画法：</h4><p>写累了，直接上代码吧，哈哈哈哈，这里我做了个小处理是把数据放在了标签的下面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">time = [time1,time2,time3,time4]</span><br><span class="line">name = [<span class="string">&#x27;供冷\n&#x27;</span>+str(time1), <span class="string">&#x27;供热\n&#x27;</span>+str(time2), <span class="string">&#x27;除湿\n&#x27;</span>+str(time3),<span class="string">&#x27;加湿\n&#x27;</span>+str(time4)] <span class="comment"># 标签</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(111, projection=<span class="string">&#x27;polar&#x27;</span>) <span class="comment">#创建极坐标的Axes对象</span></span><br><span class="line">max,min = max(time),min(time)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 提取数值信息和标签信息</span></span><br><span class="line">data=np.array(time)</span><br><span class="line">label=np.array(name)</span><br><span class="line">n = len(label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line">theta = np.linspace(0, 2*np.pi, len(data), endpoint=False) <span class="comment">#计算区间角度</span></span><br><span class="line">thetas = np.concatenate((theta, [theta[0]])) <span class="comment">#添加第一个数据，实现闭合</span></span><br><span class="line">data = np.concatenate((data, [data[0]])) <span class="comment">#添加第一个数据，实现闭合</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax.set_thetagrids(thetas*180/np.pi, label) <span class="comment">#设置网格标签，单位转化成度数</span></span><br><span class="line"></span><br><span class="line">ax.set_theta_zero_location(<span class="string">&#x27;N&#x27;</span>) <span class="comment">#设置极坐标0°位置</span></span><br><span class="line">ax.set_rlim(0, max) <span class="comment">#设置显示的极径范围</span></span><br><span class="line">ax.fill(thetas, data, facecolor=<span class="string">&#x27;b&#x27;</span>, alpha=0.15) <span class="comment">#填充颜色</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax.tick_params(pad=12, grid_color=<span class="string">&#x27;k&#x27;</span>, grid_alpha=0.2, grid_linestyle=(0, (5, 5)))</span><br><span class="line"><span class="comment"># 取消标签显示</span></span><br><span class="line">ax.tick_params(<span class="string">&#x27;y&#x27;</span>, labelleft=False) <span class="comment"># 取消left即可（top，bottom，right）</span></span><br><span class="line"><span class="comment"># 获取输入文件中的城市名字</span></span><br><span class="line">a = filepath.split(<span class="string">&#x27;.&#x27;</span>)[0]</span><br><span class="line">str = a+<span class="string">&#x27;强度雷达图&#x27;</span></span><br><span class="line"></span><br><span class="line">fig.text(0.5, 0.965, str,horizontalalignment=<span class="string">&#x27;center&#x27;</span>, color=<span class="string">&#x27;black&#x27;</span>, weight=<span class="string">&#x27;bold&#x27;</span>,size=<span class="string">&#x27;large&#x27;</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.savefig(a)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果图如下：</p><center><img src="/images/radar.png" width="300" height="300" /></center>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> matplotlib </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> matplotlib </tag>
            
            <tag> numpy </tag>
            
            <tag> excel </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用AWS EC2建立VPN教程</title>
      <link href="2021/03/31/%E4%BD%BF%E7%94%A8AWS-EC2%E5%BB%BA%E7%AB%8BVPN%E6%95%99%E7%A8%8B/"/>
      <url>2021/03/31/%E4%BD%BF%E7%94%A8AWS-EC2%E5%BB%BA%E7%AB%8BVPN%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>之前一直用的是买的的VPN，价格基本都是几十块一个月不等，其实想自己搭VPN很久了，就是一直懒，哈哈哈哈，前阵子抽空用AWS的EC2搭了一套VPN，粗略的加速了下，测试下来速度比买的Justmysocks速度快了一倍，看个Youtube 1080p完全不卡，进度条随意拖动，教程如下。</p><h3 id="注册AWS账号"><a href="#注册AWS账号" class="headerlink" title="注册AWS账号"></a>注册AWS账号</h3><p>首先要注册一个AWS的账号，英文不好的童鞋可以把语言切换成中文。至于需要填什么，自己打开来看吧，因为我的账号注册了很久了，已经忘记了，应该要绑定一张支持全币种的Visa卡，Amazon会进行信用卡验证，刷取1刀的预授权来验证信用卡是否有效，不过后续会在账单上退回，不必担心。</p><a id="more"></a><h3 id="选择服务，切换服务器地区"><a href="#选择服务，切换服务器地区" class="headerlink" title="选择服务，切换服务器地区"></a>选择服务，切换服务器地区</h3><p>点击选择EC2服务，右上角切换服务器所在地区，我选择的是Tokyo(东京)</p><center><img src="/images/1.png"/></center><h3 id="创建EC2实例"><a href="#创建EC2实例" class="headerlink" title="创建EC2实例"></a>创建EC2实例</h3><h4 id="点击图中的“Launch-Instance”创建实例"><a href="#点击图中的“Launch-Instance”创建实例" class="headerlink" title="点击图中的“Launch Instance”创建实例"></a>点击图中的“Launch Instance”创建实例</h4><center><img src="/images/2.png"/></center><h4 id="选择带Free-tier-eligible的机器，这里选的是Ubuntu-Server-18-04-LTS这款"><a href="#选择带Free-tier-eligible的机器，这里选的是Ubuntu-Server-18-04-LTS这款" class="headerlink" title="选择带Free tier eligible的机器，这里选的是Ubuntu Server 18.04 LTS这款"></a>选择带Free tier eligible的机器，这里选的是Ubuntu Server 18.04 LTS这款</h4><center><img src="/images/3.png"/></center><h4 id="之后还是选择带Free-tier-eligible的机器，配置不高，但是搭建VPN还是可以的"><a href="#之后还是选择带Free-tier-eligible的机器，配置不高，但是搭建VPN还是可以的" class="headerlink" title="之后还是选择带Free tier eligible的机器，配置不高，但是搭建VPN还是可以的"></a>之后还是选择带Free tier eligible的机器，配置不高，但是搭建VPN还是可以的</h4><center><img src="/images/4.png"/></center><h4 id="在之后的页面中点击Launch按钮，会弹出这个框，需要设置密钥对，设置完后下载密钥对，之后再Launch-Instances，密钥对在后面会用于登陆服务器"><a href="#在之后的页面中点击Launch按钮，会弹出这个框，需要设置密钥对，设置完后下载密钥对，之后再Launch-Instances，密钥对在后面会用于登陆服务器" class="headerlink" title="在之后的页面中点击Launch按钮，会弹出这个框，需要设置密钥对，设置完后下载密钥对，之后再Launch Instances，密钥对在后面会用于登陆服务器"></a>在之后的页面中点击Launch按钮，会弹出这个框，需要设置密钥对，设置完后下载密钥对，之后再Launch Instances，密钥对在后面会用于登陆服务器</h4><center><img src="/images/5.png"/></center><h3 id="启动连接实例"><a href="#启动连接实例" class="headerlink" title="启动连接实例"></a>启动连接实例</h3><h4 id="到instance列表下，选中刚才创建的实例，点击connect"><a href="#到instance列表下，选中刚才创建的实例，点击connect" class="headerlink" title="到instance列表下，选中刚才创建的实例，点击connect"></a>到instance列表下，选中刚才创建的实例，点击connect</h4><center><img src="/images/6.png"/></center><h4 id="会弹出连接方式，教你怎么连接上你创建的实例，先用chomd给文件改变权限，然后用ssh方式登录服务器"><a href="#会弹出连接方式，教你怎么连接上你创建的实例，先用chomd给文件改变权限，然后用ssh方式登录服务器" class="headerlink" title="会弹出连接方式，教你怎么连接上你创建的实例，先用chomd给文件改变权限，然后用ssh方式登录服务器"></a>会弹出连接方式，教你怎么连接上你创建的实例，先用chomd给文件改变权限，然后用ssh方式登录服务器</h4><center><img src="/images/7.png"/></center>至此，实例创建完成。<h3 id="登录服务器，用Shadowsocks搭建VPN"><a href="#登录服务器，用Shadowsocks搭建VPN" class="headerlink" title="登录服务器，用Shadowsocks搭建VPN"></a>登录服务器，用Shadowsocks搭建VPN</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo -s //获取root权限</span><br><span class="line">apt-get update //更新apt-get</span><br><span class="line">apt-get install python-pip //安装pip工具，用于安装shadowsocks</span><br><span class="line">pip install shadowsocks //安装shadowsocks</span><br><span class="line"><span class="built_in">cd</span> ../../usr/<span class="built_in">local</span>/bin/  //进入bin目录下</span><br><span class="line">vim shadowsocks_conf.json //编辑shadowsocks配置</span><br></pre></td></tr></table></figure><p>json文件内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;server&quot;</span>:<span class="string">&quot;0.0.0.0&quot;</span>, </span><br><span class="line">    <span class="string">&quot;server_port&quot;</span>: 8838, <span class="comment">#vpn端口号</span></span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;qwertyuiop&quot;</span>, <span class="comment">#连接密码</span></span><br><span class="line">    <span class="string">&quot;local_address&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;local_port&quot;</span>:1080,</span><br><span class="line">    <span class="string">&quot;timeout&quot;</span>:600,</span><br><span class="line">    <span class="string">&quot;method&quot;</span>:<span class="string">&quot;aes-256-cfb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fast_open&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想配置多个端口和密码给不同用户，则json文件如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;server&quot;</span>:<span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;local_address&quot;</span>:<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line"><span class="string">&quot;local_port&quot;</span>:1080,</span><br><span class="line"><span class="string">&quot;port_password&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;9000&quot;</span>:<span class="string">&quot;123456&quot;</span>,</span><br><span class="line"><span class="string">&quot;9001&quot;</span>:<span class="string">&quot;456&quot;</span>,</span><br><span class="line"><span class="string">&quot;9002&quot;</span>:<span class="string">&quot;789&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;timeout&quot;</span>:600,</span><br><span class="line"><span class="string">&quot;method&quot;</span>:<span class="string">&quot;aes-128-gcm&quot;</span>,</span><br><span class="line"><span class="string">&quot;fast_open&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动shadowsocks：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c shadowsocks_conf.json -d start</span><br></pre></td></tr></table></figure><p>注：关闭和重启ss服务命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c shadowsocks_conf.json -d stop     //关闭服务</span><br><span class="line">ssserver -c shadowsocks_conf.json -d restart  //重启服务</span><br></pre></td></tr></table></figure><h3 id="编辑EC2入站规则"><a href="#编辑EC2入站规则" class="headerlink" title="编辑EC2入站规则"></a>编辑EC2入站规则</h3><h4 id="找到对应security-group的名字"><a href="#找到对应security-group的名字" class="headerlink" title="找到对应security group的名字"></a>找到对应security group的名字</h4><center><img src="/images/8.png"/></center><h4 id="进入security-group面板，找到对面的组，然后点击编辑入站规则"><a href="#进入security-group面板，找到对面的组，然后点击编辑入站规则" class="headerlink" title="进入security group面板，找到对面的组，然后点击编辑入站规则"></a>进入security group面板，找到对面的组，然后点击编辑入站规则</h4><center><img src="/images/9.png"/></center><h4 id="自定义入站规则，把刚刚在json配置文件中的端口给加上去，我用的是8838，再加个22端口，ssh默认使用的是22端口，如果修改过，则换为修改后的端口"><a href="#自定义入站规则，把刚刚在json配置文件中的端口给加上去，我用的是8838，再加个22端口，ssh默认使用的是22端口，如果修改过，则换为修改后的端口" class="headerlink" title="自定义入站规则，把刚刚在json配置文件中的端口给加上去，我用的是8838，再加个22端口，ssh默认使用的是22端口，如果修改过，则换为修改后的端口"></a>自定义入站规则，把刚刚在json配置文件中的端口给加上去，我用的是8838，再加个22端口，ssh默认使用的是22端口，如果修改过，则换为修改后的端口</h4><center><img src="/images/10.png"/></center>至此搭建工作完成。<h3 id="配置shadowsocks客户端信息"><a href="#配置shadowsocks客户端信息" class="headerlink" title="配置shadowsocks客户端信息"></a>配置shadowsocks客户端信息</h3><p>本人用的是Mac，分享一个shadowsocks客户端的下载地址，其他版本的各位自行查找，github上也有。再贴上一个<a href="https://shadowsocks.org/en/download/clients.html">shadowsocks的官网</a>，里面各种版本都有，自行选择下载。<br><a id="download" href="https://vpnlyu-dev.s3.amazonaws.com/ShadowsocksX-NG.zip"><i class="fa fa-download"></i><span> 点击下载</span> </a></p><p>安装完后，在 服务器-&gt;服务器设定，填写配置信息，配置信息在刚刚的json文件中配置了，地址不要使用ifconfig显示的IP，在控制台页面中查看公网IP，还是在下方把滚动条向右滑</p><center><img src="/images/11.png"/></center>在这里查看IP<center><img src="/images/12.png"/></center>至此就可以科学上网了。<h3 id="关于BBR优化"><a href="#关于BBR优化" class="headerlink" title="关于BBR优化"></a>关于BBR优化</h3><p>BBR是Google最新开发的TCP拥塞控制算法，目前有着较好的带宽提升效果。</p><h4 id="升级Linux内核"><a href="#升级Linux内核" class="headerlink" title="升级Linux内核"></a>升级Linux内核</h4><p>BBR在Linux kernel 4.9引入。首先检查服务器kernel版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>如果其显示版本在4.9.0之下(选择了以上的EC2应该不会出现这种情况)，则需要升级Linux内核，否则请忽略下文。<br>更新包管理器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>查看可用的Linux内核版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-cache showpkg linux-image</span><br></pre></td></tr></table></figure><p>找到一个你想要升级的Linux内核版本，如“linux-image-4.10.0-22-generic”：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install linux-image-4.10.0-22-generic</span><br></pre></td></tr></table></figure><p>等待安装完成后重启服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>删除老的Linux内核：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo purge-old-kernels</span><br></pre></td></tr></table></figure><h4 id="开启BBR"><a href="#开启BBR" class="headerlink" title="开启BBR"></a>开启BBR</h4><p>运行 lsmod | grep bbr，如果结果中没有tcp_bbr，则先运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">modprobe tcp_bbr</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;tcp_bbr&quot;</span> &gt;&gt; /etc/modules-load.d/modules.conf</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>保存生效。运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure><p>若均有bbr，则开启BBR成功。</p><p>以上就是使用AWS的EC2搭建VPN的过程，以及后续有BBR优化，有问题的小伙伴欢迎在评论区留言。</p>]]></content>
      
      
      <categories>
          
          <category> AWS </category>
          
          <category> vpn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> vpn </tag>
            
            <tag> EC2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科学上网后导致push至GitHub出错</title>
      <link href="2021/03/19/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%90%8E%E5%AF%BC%E8%87%B4push%E8%87%B3GitHub%E5%87%BA%E9%94%99/"/>
      <url>2021/03/19/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%90%8E%E5%AF%BC%E8%87%B4push%E8%87%B3GitHub%E5%87%BA%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>最近使用VPN科学上网时，导致了push到git的速度大幅减慢，最后还出现了push错误的情况，报错情况如下：</p><center><img src="/images/problem.png"/></center>搜索了下说是因为科学上网的原因，但是试了很多方法都没用，以下是我最后解决的方法（也贴上查到的其他方法，希望总有一个适合你）：<a id="more"></a><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>如果你开启了VPN，很可能是因为代理的问题，这时候设置一下http.proxy就可以了。<br>比如我用的VPN是shadow，先查看当前VPN代理使用的端口号，如下图所示，我的端口号是1087</p><center><img src="/images/port.png" width="50%" height="50%"/></center><p>所以，在git bash命令行中输入以下命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:1087</span><br><span class="line">git config --global https.proxy 127.0.0.1:1087</span><br></pre></td></tr></table></figure><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.gitconfig</span><br></pre></td></tr></table></figure><p>把里面关于https的配置删掉，然后就可以了，原来代理配置被写入到了文件（这种情况应该适用于关掉VPN之后的情况）</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>如果你之前git中已经设置过上述配置，则使用如下命令取消再进行配置即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><p>下面是几个常用的git配置查看命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy <span class="comment">#查看git的http代理配置</span></span><br><span class="line">git config --global https.proxy <span class="comment">#查看git的https代理配置</span></span><br><span class="line">git config --global -l <span class="comment">#查看git的所有配置</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> vpn </tag>
            
            <tag> git </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/02/20/hello-world/"/>
      <url>2021/02/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p><span id="inline-blue"> blue test block </span><br><span id="inline-purple"> purple test block </span><br><span id="inline-yellow"> yellow test block </span><br><span id="inline-green"> green test block </span></p><!-- <center><b>2017_12_19_视频1</b></center><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"https://lc-gluttony.s3.amazonaws.com/qpLO4IIFvprw/adb1aa176e5873c28a74.mp4/520%20LOL.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> --><p><a id="download" href="https://git-scm.com/download/win"><i class="fa fa-download"></i><span> Download Now</span> </a></p><p><i class="fa fa-pencil"></i>awesome pencil icon test</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how to get generic class type in HQL</title>
      <link href="2019/06/21/Get-Generic-class-type-in-hql/"/>
      <url>2019/06/21/Get-Generic-class-type-in-hql/</url>
      
        <content type="html"><![CDATA[<p>Recently, I faced up a problem in my project. I tried to use generic type in my project, but when it came to the hibernate hql, I can not get the generic type. Following is the solution:</p><h2 id="Let’s-begin"><a href="#Let’s-begin" class="headerlink" title="Let’s begin"></a>Let’s begin</h2><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1:"></a>Step 1:</h3><p>Suppose I have a normal class like findById.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public User findById(Long id) &#123;</span><br><span class="line">        String hql = <span class="string">&quot;FROM User u where u.id = :userId&quot;</span>;</span><br><span class="line">        Session s = sessionFactory.getCurrentSession();</span><br><span class="line">        TypedQuery&lt;User&gt; query = s.createQuery(hql);</span><br><span class="line">        query.setParameter(<span class="string">&quot;userId&quot;</span>, id);</span><br><span class="line">        <span class="built_in">return</span> query.getSingleResult();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2:"></a>Step 2:</h3><p>I write a CRUDDaoImpl to let all the class be generic type.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Repository // new CRUDDaoImpl()</span><br><span class="line">@Transactional</span><br><span class="line">//T=B, ID=IB</span><br><span class="line">public abstract class CRUDDaoImpl&lt;B,IB&gt; implements CRUDDao&lt;B,IB&gt;&#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SessionFactory sessionFactory;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public B findById(IB ib) &#123;</span><br><span class="line">        String hql = <span class="string">&quot;FROM &quot;</span>+xxx +<span class="string">&quot; b where b.id = :iibb&quot;</span>;</span><br><span class="line">        TypedQuery&lt;B&gt; query = sessionFactory.getCurrentSession().createQuery(hql).setParameter(<span class="string">&quot;iibb&quot;</span>,ib);</span><br><span class="line">        <span class="built_in">return</span> query.getSingleResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3:"></a>Step 3:</h3><p>Here we are going to get the class type of B to replace the “xxx” in the HQL.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Repository // new CRUDDaoImpl()</span><br><span class="line">@Transactional</span><br><span class="line">//T=B, ID=IB</span><br><span class="line">public abstract class CRUDDaoImpl&lt;B,IB&gt; implements CRUDDao&lt;B,IB&gt;&#123;</span><br><span class="line"></span><br><span class="line">    protected Class&lt;B&gt; hQLEntityClazz;</span><br><span class="line"></span><br><span class="line">    public abstract void setHQLEntityClazz();</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SessionFactory sessionFactory;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public B findById(IB ib) &#123;</span><br><span class="line">        String hql = <span class="string">&quot;FROM &quot;</span>+hQLEntityClazz.getName() +<span class="string">&quot; b where b.id = :iibb&quot;</span>;</span><br><span class="line">        TypedQuery&lt;B&gt; query = sessionFactory.getCurrentSession().createQuery(hql).setParameter(<span class="string">&quot;iibb&quot;</span>,ib);</span><br><span class="line">        <span class="built_in">return</span> query.getSingleResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we should implement the setHQLEntityClazz method in the UserDaoImpl:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoImpl extends CRUDDaoImpl&lt;User,Long&gt; implements UserDao&#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SessionFactory sessionFactory;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @Autowired</span><br><span class="line">    public void <span class="function"><span class="title">setHQLEntityClazz</span></span>() &#123;</span><br><span class="line">        this.hQLEntityClazz = User.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That’s all, thank you!</p>]]></content>
      
      
      <categories>
          
          <category> Hibernate </category>
          
          <category> HQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HQL </tag>
            
            <tag> Hibernate </tag>
            
            <tag> generic type </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
